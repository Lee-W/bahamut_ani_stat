[tool.commitizen]
name = "cz_conventional_commits"
version = "0.8.0"
tag_format = "$version"
version_files = ["pyproject.toml:version"]


[tool.ruff]
line-length = 88
ignore = ["E501", "D1", "D415"]

[tool.ruff.isort]
known-first-party = ["tests"]

[tool.ruff.pydocstyle]
convention = "google"


[tool.mypy]
files = ["bahamut_ani_stat", "tests"]
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = ["bahamut_ani_stat.*"]
# Ensure full coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_untyped_decorators = false


[tool.pytest.ini_options]
minversion = "7.2.0"
testpaths = "tests"
addopts = "--strict-markers"
norecursedirs = [
    ".*",
    "build",
    "dist",
    "CVS",
    "_darcs",
    "{arch}",
    "*.egg",
    "venv",
    "env",
    "virtualenv",
]
markers = ["slow"]


[tool.coverage]
[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]
omit = ['env/*', 'venv/*', '*/virtualenv/*', '*/virtualenvs/*', '*/tests/*']

[tool.poetry]
name = "bahamut_ani_stat"
version = "0.8.0"
authors = ["Wei Lee <weilee.rx@gmail.com>"]
description = "Toolkit for Bahamut ani gamer data"
license = "MIT license"
readme = "docs/README.md"
repository = "https://github.com/Lee-W/bahamut_ani_stat"

[tool.poetry.dependencies]
python = "^3.9"
httpx = "^0.27.0"
beautifulsoup4 = "^4.12.3"
tqdm = "^4.61.1"
dataclasses-json = "^0.5.4"
lxml = "^5.0.0"
click = "^8.0.1"
SQLAlchemy = { extras = ["mypy"], version = "^1.4.0" }
bokeh = "^3.0.0"
pandas = "^2.0.0"
pydantic = "^2.0.0"
pydantic-settings = "^2.4.0"
setuptools = "^72.1.0"

[tool.poetry.dev-dependencies]
# task management
invoke = "^2.0.0"
# test
pytest = "^8.2.1"
pytest-cov = "^5.0.0"
pytest-mock = "^3.0.0"
pytest-regressions = "^2.5.0"
pytest-httpx = "^0.30.0"
pytest-datadir = "^1.5.0"
pytest-sugar = "^1.0.0"
coverage = { extras = ["toml"], version = "^7.0.0" }
# style
ruff = "^0.5.7"
mypy = "^1.11.1"
# security
bandit = "^1.7.9"
pip-audit = "^2.7.3"
# git
commitizen = "^3.0.0"
pre-commit = "^3.0.0"
# documentation
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.3"
# type hinting
types-PyYAML = "^6.0.12.20240808"
types-setuptools = "^57.0.0"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
